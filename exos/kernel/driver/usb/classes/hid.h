#ifndef USB_CLASS_HID_H
#define USB_CLASS_HID_H

#include <usb/usb.h>

typedef enum
{
	USB_HID_SUBCLASS_NONE = 0,
	USB_HID_SUBCLASS_BOOT = 1, // used for devices that need support at boot
} usb_hid_subclass_t;

typedef enum
{
	USB_HID_PROTOCOL_NONE = 0,
	USB_HID_PROTOCOL_KEYBOARD = 1,
	USB_HID_PROTOCOL_MOUSE = 2,
} usb_hid_protocol_t;

typedef struct __attribute__((__packed__))
{
	unsigned char DescriptorType;
	usb16_t DescriptorLength;
} usb_hid_descriptor_entry_t;

typedef struct __attribute__((__packed__))
{
	usb_descriptor_header_t Header;
    usb16_t HIDSpec;
	unsigned char CountryCode;
	unsigned char NumDescriptors;
    usb_hid_descriptor_entry_t ReportDescriptors[1];
} usb_hid_descriptor_t;

#define USB_HID_DESCRIPTOR_HID 0x21
#define USB_HID_DESCRIPTOR_REPORT 0x22
#define USB_HID_DESCRIPTOR_PHYSICAL 0x23

typedef struct __attribute__((__packed__))
{
	unsigned Size:2;
	unsigned Type:2;
	unsigned Tag:4;
	unsigned char DataSize;
	unsigned char LongItemTag;
} usb_hid_item_t;

#define USB_HID_ITEM_SIZE_0 0
#define USB_HID_ITEM_SIZE_1 1
#define USB_HID_ITEM_SIZE_2 2
#define USB_HID_ITEM_SIZE_4 3

#define USB_HID_ITEM_TYPE_MAIN 0
#define USB_HID_ITEM_TYPE_GLOBAL 1
#define USB_HID_ITEM_TYPE_LOCAL 2
#define USB_HID_ITEM_TYPE_RESERVED 3

// MAIN ITEMS
#define USB_HID_ITEM_TAG_INPUT 0b1000
#define USB_HID_ITEM_TAG_OUTPUT 0b1001
#define USB_HID_ITEM_TAG_FEATURE 0b1011
#define USB_HID_ITEM_TAG_COLLECTION 0b1010
#define USB_HID_ITEM_TAG_END_COLLECTION 0b1100

// GLOBAL ITEMS
#define USB_HID_ITEM_TAG_USAGE_PAGE 0b0000
#define USB_HID_ITEM_TAG_MINIMUM 0b0001
#define USB_HID_ITEM_TAG_MAXIMUM 0b0010
#define USB_HID_ITEM_TAG_PHY_MINIMUM 0b0011
#define USB_HID_ITEM_TAG_PHY_MAXIMUM 0b0100
#define USB_HID_ITEM_TAG_UNIT_EXP 0b0101
#define USB_HID_ITEM_TAG_UNIT 0b0110
#define USB_HID_ITEM_TAG_REPORT_SIZE 0b0111
#define USB_HID_ITEM_TAG_REPORT_ID 0b1000
#define USB_HID_ITEM_TAG_REPORT_COUNT 0b1001
#define USB_HID_ITEM_TAG_PUSH 0b1010
#define USB_HID_ITEM_TAG_POP 0b1011
#define USB_HID_ITEM_TAG_LONGITEM 0b1111

// LOCAL ITEMS
#define USB_HID_ITEM_TAG_USAGE 0b0000
#define USB_HID_ITEM_TAG_USAGE_MIN 0b0001
#define USB_HID_ITEM_TAG_USAGE_MAX 0b0010


// Usage Pages
#define USB_HID_USAGE_PAGE_UNDEFINED		0
#define USB_HID_USAGE_PAGE_GENERIC_DESKTOP	1
#define USB_HID_USAGE_PAGE_SIMULATION		2
#define USB_HID_USAGE_PAGE_VR_CONTROLS		3
#define USB_HID_USAGE_PAGE_SPORT_CONTROLS	4
#define USB_HID_USAGE_PAGE_GAME_CONTROLS	5
#define USB_HID_USAGE_PAGE_GENERIC_DEVICE_CONTROLS	6
#define USB_HID_USAGE_PAGE_KEYBOARD			7
#define USB_HID_USAGE_PAGE_LED				8
#define USB_HID_USAGE_PAGE_BUTTON			9
#define USB_HID_USAGE_PAGE_ORDINAL			10
#define USB_HID_USAGE_PAGE_TELEPHONY_DEVICE	11
#define USB_HID_USAGE_PAGE_CONSUMER			12

typedef enum
{
	USB_HID_DESKTOP_USAGE_UNDEFINED = 0,
	USB_HID_DESKTOP_USAGE_POINTER = 1,
	USB_HID_DESKTOP_USAGE_MOUSE = 2,
	USB_HID_DESKTOP_USAGE_JOYSTICK = 4,
	USB_HID_DESKTOP_USAGE_GAMEPAD = 5,
	USB_HID_DESKTOP_USAGE_KEYBOARD = 6,

	USB_HID_DESKTOP_USAGE_X	= 0x30,
	USB_HID_DESKTOP_USAGE_Y	= 0x31,
	USB_HIS_DESKTOP_USAGE_WHEEL = 0x38,
} usb_hid_desktop_usage_t;

#define USB_HID_INPUT_DATA (0<<0)
#define USB_HID_INPUT_CONSTANT (1<<0)
#define USB_HID_INPUT_ARRAY (0<<1)
#define USB_HID_INPUT_VARIABLE (1<<1)
#define USB_HID_INPUT_ABSOLUTE (0<<2)
#define USB_HID_INPUT_RELATIVE (1<<2)
#define USB_HID_INPUT_WRAP (1<<3)
#define USB_HID_INPUT_NONLINEAR (1<<4)
#define USB_HID_INPUT_NONPREFERRED (1<<5)
#define USB_HID_INPUT_NULLPOSITION (1<<6)
#define USB_HID_INPUT_BUFFERED (1<<8)

typedef enum
{
	USB_HID_COLLECTION_PHYSICAL = 0,
	USB_HID_COLLECTION_APPLICATION = 1,
	USB_HID_COLLECTION_LOGICAL = 2,
	USB_HID_COLLECTION_REPORT = 3,
	USB_HID_COLLECTION_NAME_ARRY = 4,
	USB_HID_COLLECTION_USAGE_SWITCH = 5,
} usb_hid_collection_type_t;


// Report Descriptor Macros
#define USB_HID_ITEM_KEY(tag, type, size) (((tag) << 4)|((type) << 2)|(size))
// Main Items
#define USB_HID_ITEM_INPUT(flags)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_INPUT, USB_HID_ITEM_TYPE_MAIN, USB_HID_ITEM_SIZE_1), flags
#define USB_HID_ITEM_OUTPUT(flags)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_OUTPUT, USB_HID_ITEM_TYPE_MAIN, USB_HID_ITEM_SIZE_11), flags
#define USB_HID_ITEM_FEATURE(flags)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_FEATURE, USB_HID_ITEM_TYPE_MAIN, USB_HID_ITEM_SIZE_1), flags
#define USB_HID_ITEM_COLLECTION(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_COLLECTION, USB_HID_ITEM_TYPE_MAIN, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_END_COLLECTION		USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_END_COLLECTION, USB_HID_ITEM_TYPE_MAIN, USB_HID_ITEM_SIZE_0)
// Global Items
#define USB_HID_ITEM_USAGE_PAGE(page)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_USAGE_PAGE, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), page
#define USB_HID_ITEM_MIN8(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_MINIMUM, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_MAX8(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_MAXIMUM, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_PHY_MIN8(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_PHY_MINIMUM, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_PHY_MAX8(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_PHY_MAXIMUM, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_PHY_UNIT_EXP(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_UNIT_EXP, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_PHY_UNIT(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_UNIT, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_REPORT_SIZE(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_REPORT_SIZE, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_REPORT_ID(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_REPORT_ID, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_REPORT_COUNT(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_REPORT_COUNT, USB_HID_ITEM_TYPE_GLOBAL, USB_HID_ITEM_SIZE_1), value
// Local Items
#define USB_HID_ITEM_USAGE(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_USAGE, USB_HID_ITEM_TYPE_LOCAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_USAGE_MIN(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_USAGE_MIN, USB_HID_ITEM_TYPE_LOCAL, USB_HID_ITEM_SIZE_1), value
#define USB_HID_ITEM_USAGE_MAX(value)	USB_HID_ITEM_KEY(USB_HID_ITEM_TAG_USAGE_MAX, USB_HID_ITEM_TYPE_LOCAL, USB_HID_ITEM_SIZE_1), value

// Class Requests
typedef enum
{
	USB_HID_REQUEST_GET_REPORT = 0x1,
	USB_HID_REQUEST_GET_IDLE = 0x2,
	USB_HID_REQUEST_GET_PROTOCOL = 0x3,
	USB_HID_REQUEST_SET_REPORT = 0x9,
	USB_HID_REQUEST_SET_IDLE = 0xa,
	USB_HID_REQUEST_SET_PROTOCOL = 0xb,
} usb_hid_request_code_t;

typedef enum
{
	USB_HID_REPORT_INPUT = 1,
	USB_HID_REPORT_OUTPUT = 2,
	USB_HID_REPORT_FEATURE = 3,
} usb_hid_report_type_t;

typedef enum
{
	USB_HID_KBM_LEFT_CTRL = (1<<0),
	USB_HID_KBM_LEFT_SHIFT = (1<<1),
	USB_HID_KBM_LEFT_ALT = (1<<2),
	USB_HID_KBM_LEFT_GUI = (1<<3),
	USB_HID_KBM_RIGHT_CTRL = (1<<4),
	USB_HID_KBM_RIGHT_SHIFT = (1<<5),
	USB_HID_KBM_RIGHT_ALT = (1<<6),
	USB_HID_KBM_RIGHT_GUI = (1<<7),
} usb_hid_kb_modifier_t;

typedef enum
{
	USB_HID_KBU_LEFT_CTRL = 0xe0,
	USB_HID_KBU_LEFT_SHIFT,
	USB_HID_KBU_LEFT_ALT,
	USB_HID_KBU_LEFT_GUI,
	USB_HID_KBU_RIGHT_CTRL,
	USB_HID_KBU_RIGHT_SHIFT,
	USB_HID_KBU_RIGHT_ALT,
	USB_HID_KBU_RIGHT_GUI,
} usb_hid_keyboard_usages_t;

#define USB_HID_MAX_REPORT_SIZE 64


#endif // USB_CLASS_HID_H


